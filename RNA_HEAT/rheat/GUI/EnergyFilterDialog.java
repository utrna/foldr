/*
 * EnergyFilterDialog.java
 *
 * Created on May 5, 2003, 10:17 AM
 */

package rheat.GUI;

import rheat.base.*;
import rheat.filter.EnergyMaxMinFilter;
import rheat.filter.Filter;
import javax.swing.JOptionPane;

/**
 *
 * @author  jyzhang
 */
public class EnergyFilterDialog
extends FilterDialog {

    public EnergyFilterDialog() {
        super("Helix Energy");
        initComponents();
    }

    /**
     * Implements FilterDialog interface.
     */
    public rheat.filter.Filter getNewFilter() {
        return filter;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        minGField = new FocusingField.SingleLine();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        maxGField = new FocusingField.SingleLine();

        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText("Specify the helix energetic stability:");
        jPanel1.add(jLabel1);

        getContentPane().add(jPanel1);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setText("Maximum Stability (Low G value)");
        jLabel2.setPreferredSize(new java.awt.Dimension(220, 16));
        jPanel2.add(jLabel2);

        minGField.setColumns(4);
        minGField.setText("none");
        jPanel2.add(minGField);

        getContentPane().add(jPanel2);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel3.setText("Minimum Stability (High G value)");
        jLabel3.setPreferredSize(new java.awt.Dimension(220, 16));
        jPanel3.add(jLabel3);

        maxGField.setColumns(4);
        maxGField.setText("none");
        jPanel3.add(maxGField);

        getContentPane().add(jPanel3);
    }

    /**
     * Implementation of interface method; commits changes (as the
     * user has accepted the dialog).
     */
    void actionPanelAccepted() {
        EnergyMaxMinFilter newFilter = new EnergyMaxMinFilter();
        try {
            double min = Double.NEGATIVE_INFINITY; 
            double max = Double.POSITIVE_INFINITY;
            String maxG = this.maxGField.getText();
            String minG = this.minGField.getText();
            if (!(maxG.equals("NONE") || maxG.equals("none"))){
                max = Double.parseDouble(maxG);
            }
            if (!(minG.equals("NONE") || minG.equals("none"))){
                min = Double.parseDouble(minG);
            }
            if (min >= max){
                throw new RuntimeException ("Minimum G value must be less than Maximum G value");
            }
            this.setVisible(false);
            newFilter.setArguments(max, min);
            this.filter = newFilter;
        }
        catch (NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Invalid Input: Bad number", "Error", JOptionPane.ERROR_MESSAGE);
        }
        catch (RuntimeException ex){
            JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel1;
    private FocusingField.SingleLine minGField;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel1;
    private FocusingField.SingleLine maxGField;
    // End of variables declaration
    private Filter filter; // null unless dialog was accepted by user

}

